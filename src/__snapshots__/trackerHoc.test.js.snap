// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals false and group equals "default-group" when render promiseTrackerHoc without props 1`] = `
<promiseTrackerComponent>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 0,
        "group": "default-area",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals false and group equals "testgroup" when feeding group equals "testgroup" 1`] = `
<promiseTrackerComponent
  config={
    Object {
      "group": "testgroup",
    }
  }
>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 0,
        "group": "testgroup",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals false and group equals "testgroup" when feeding group equals "testgroup" and delay equals 300 1`] = `
<promiseTrackerComponent
  config={
    Object {
      "delay": 300,
      "group": "testgroup",
    }
  }
>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 300,
        "group": "testgroup",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals false when counter is 0 1`] = `
<promiseTrackerComponent>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 0,
        "group": "default-area",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals false when counter is 0 and delay equals 300 1`] = `
<promiseTrackerComponent
  config={
    Object {
      "delay": 300,
    }
  }
>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 300,
        "group": "default-area",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals false when counter is 0 and emit event with progress equals false 1`] = `
<promiseTrackerComponent>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 0,
        "group": "default-area",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals false when counter is 0 and emit event with progress equals false and delay equals 300 1`] = `
<promiseTrackerComponent
  config={
    Object {
      "delay": 300,
    }
  }
>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 300,
        "group": "default-area",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals false when counter is 0 and emit event with progress equals false to different group 1`] = `
<promiseTrackerComponent>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 0,
        "group": "default-area",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals false when counter is 0 and emit event with progress equals false to different group and delay equals 300 1`] = `
<promiseTrackerComponent
  config={
    Object {
      "delay": 300,
    }
  }
>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 300,
        "group": "default-area",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals false when counter is 0 and emit event with progress equals true to different group 1`] = `
<promiseTrackerComponent>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 0,
        "group": "default-area",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals false when counter is 0 and emit event with progress equals true to different group and delay equals 300 1`] = `
<promiseTrackerComponent
  config={
    Object {
      "delay": 300,
    }
  }
>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 300,
        "group": "default-area",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals false when counter is 1 and emit event with progress equals false 1`] = `
<promiseTrackerComponent>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 0,
        "group": "default-area",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals false when counter is 1 and emit event with progress equals false and delay equals 300 1`] = `
<promiseTrackerComponent
  config={
    Object {
      "delay": 300,
    }
  }
>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 300,
        "group": "default-area",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals false, group equals "default-group" and customProp equals "test" when feeding customProp equals "test" 1`] = `
<promiseTrackerComponent
  customProp="test"
>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 0,
        "group": "default-area",
      }
    }
    customProp="test"
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals true when counter is 0 and emit event with progress equals true 1`] = `
<promiseTrackerComponent>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 0,
        "group": "default-area",
      }
    }
    promiseInProgress={true}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals true when counter is 0 and emit event with progress equals true and delay equals 300 1`] = `
<promiseTrackerComponent
  config={
    Object {
      "delay": 300,
    }
  }
>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 300,
        "group": "default-area",
      }
    }
    promiseInProgress={true}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals true when counter is 1 1`] = `
<promiseTrackerComponent>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 0,
        "group": "default-area",
      }
    }
    promiseInProgress={true}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals true when counter is 1 and delay equals 300 1`] = `
<promiseTrackerComponent
  config={
    Object {
      "delay": 300,
    }
  }
>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 300,
        "group": "default-area",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals true when counter is 1 and emit event with progress equals false to different group 1`] = `
<promiseTrackerComponent>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 0,
        "group": "default-area",
      }
    }
    promiseInProgress={true}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals true when counter is 1 and emit event with progress equals false to different group and delay equals 300 1`] = `
<promiseTrackerComponent
  config={
    Object {
      "delay": 300,
    }
  }
>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 300,
        "group": "default-area",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals true when counter is 1 and emit event with progress equals true 1`] = `
<promiseTrackerComponent>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 0,
        "group": "default-area",
      }
    }
    promiseInProgress={true}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals true when counter is 1 and emit event with progress equals true and delay equals 300 1`] = `
<promiseTrackerComponent
  config={
    Object {
      "delay": 300,
    }
  }
>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 300,
        "group": "default-area",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals true when counter is 1 and emit event with progress equals true to different group 1`] = `
<promiseTrackerComponent>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 0,
        "group": "default-area",
      }
    }
    promiseInProgress={true}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;

exports[`trackerHoc Initial Status should render component with trackedPromiseInProgress equals true when counter is 1 and emit event with progress equals true to different group and delay equals 300 1`] = `
<promiseTrackerComponent
  config={
    Object {
      "delay": 300,
    }
  }
>
  <TestSpinnerComponent
    config={
      Object {
        "delay": 300,
        "group": "default-area",
      }
    }
    promiseInProgress={false}
  >
    <span>
      test
    </span>
  </TestSpinnerComponent>
</promiseTrackerComponent>
`;
